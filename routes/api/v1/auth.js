const express = require('express');
const router = express.Router();
const { check, validationResult } = require('express-validator')
const jwt = require('jsonwebtoken')
const config = require('config')
const bcrypt = require('bcryptjs')
const auth = require('../../../middleware/auth')
const User = require('../../../models/User')

//@route get api/auth
//@desc 
//@access public
router.get('/', auth, async (req, res)=>{
    try {
        //select('-password') removes user.password from user object
        const user = await User.findById(req.user.id).select('-password');
        res.json(user)
    } catch (error) {
        console.error(error.message);
        res.status(500).send('Server Auth Error');
    }
});


//@route POST api/auth
//@desc logging in, authenticate user and get token
//@access 
router.post('/', [
    check('email', 'Please enter a valid email')
        .isEmail(),
    check('password', 'Password is required')
        .exists()
],
    async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
        }


        const {email, password} = req.body
        
        try {
            //check if user exists
            let user = await User.findOne({ email });
            if (!user) {
                //must put return because cannot set headers after sent to client, which is being done at res.send(...)
                console.log(email, 'does not exist')
                return res.status(400).json({ errors: [{msg: 'Invalid credentials'}] });
            }

            //compares plaintext to encrypted
            const isMatch = await bcrypt.compare(password, user.password);
            
            if (!isMatch) {
                console.log('Invalid Password')
                return res.status(400).json({ errors: [{msg: 'Invalid credentials'}] });
            }

            //return jsonwebtoken
            const payload = {
                user: {
                    id: user.id
                }
            }


            //expiresin is how long the user stays logged in
            //json webtoken which contains the autogenerated _id from mongodb
            //used in headers to access protected routes, used for auth
            jwt.sign(
                payload,
                config.get('jwtSecret'),
                { expiresIn: 3600000 },
                (err, token) => {
                    if (err) throw err;
                    res.json({ token })
                }
            );

        } catch (error) {
            console.error(error.message);
            res.status(500).send('Serve User Error')
        }

    });

module.exports = router;